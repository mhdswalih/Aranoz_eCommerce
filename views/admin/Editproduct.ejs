<%- include('../layout/adminheder') %>

<style>
  body {
    background-color: #121212;
    color: #ffffff;
  }
  .row {
    min-height: 100vh;
    display: flex;
    justify-content: start;
    align-items: center;
  }
  .container {
    background: #1f1f1f;
    padding: 30px;
    margin-top: 50px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    border-radius: 8px;
  }
  .form-group label {
    font-weight: bold;
    color: #ffffff;
  }
  .form-control {
    background-color: #2c2c2c;
    border: 1px solid #444444;
    color: #ffffff;
  }
  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
  }
  .nav-link,
  .navbar-profile-name,
  .navbar-brand img,
  .sidebar .nav .nav-item .nav-link .menu-title {
    color: #ffffff;
  }
</style>

<div class="container-fluid page-body-wrapper">
  <nav class="navbar p-0 fixed-top d-flex flex-row">
    <div class="navbar-brand-wrapper d-flex d-lg-none align-items-center justify-content-center">
      <a class="navbar-brand brand-logo-mini" href="/admin/home"><img src="/Admin assets/assets/images/logo-mini.svg" alt="logo" /></a>
    </div>
    <div class="navbar-menu-wrapper flex-grow d-flex align-items-stretch">
      <button class="navbar-toggler navbar-toggler align-self-center" type="button" data-toggle="minimize">
        <span class="mdi mdi-menu"></span>
      </button>
      <ul class="navbar-nav navbar-nav-right">
        <li class="nav-item nav-profile dropdown">
          <a class="nav-link" id="profileDropdown" href="#" data-toggle="dropdown" aria-expanded="false"></a>
          <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
            <a class="dropdown-item" href="#"><i class="mdi mdi-cached mr-2 text-success"></i> Activity Log </a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#"><i class="mdi mdi-logout mr-2 text-primary"></i> Signout </a>
          </div>
        </li>
        <li class="nav-item d-none d-lg-block full-screen-link">
          <a class="nav-link"><i class="mdi mdi-fullscreen" id="fullscreen-button"></i></a>
        </li>
        <li class="nav-item dropdown">
          <a class="nav-link count-indicator dropdown-toggle" id="messageDropdown" href="#" data-toggle="dropdown" aria-expanded="false">
            <i class="mdi mdi-email-outline"></i>
            <span class="count-symbol bg-warning"></span>
          </a>
        </li>
        <li class="nav-item nav-logout d-none d-lg-block">
          <a class="nav-link" href="#"><i class="mdi mdi-power"></i></a>
        </li>
        <li class="nav-item nav-settings d-none d-lg-block">
          <a class="nav-link" href="#"><i class="mdi mdi-format-line-spacing"></i></a>
        </li>
      </ul>
      <button class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button" data-toggle="offcanvas">
        <span class="mdi mdi-menu"></span>
      </button>
    </div>
  </nav>
  <div class="main-panel">
    <div class="content-wrapper">
      <div class="page-header"></div>
      <div class="row">
        <div class="col-md-8 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Product Form</h4>
              <form class="forms-sample" id="productForm" action="/admin/Editproduct" method="POST" enctype="multipart/form-data">
                <div class="form-group">
                  <label for="productName">Product Name</label>
                  <input type="text" class="form-control" id="productName" placeholder="Product Name" value="<%= product.productname %>" name="productname" >
                </div>
                <div class="form-group">
                  <label for="productPrice">Product Price</label>
                  <input type="number" class="form-control" id="productPrice" placeholder="Product Price" value="<%= product.productprice %>" name="productprice" step="0.01" >
                </div>
                <div class="form-group">
                  <label for="productQuantity">Product Quantity</label>
                  <input type="number" class="form-control" id="productQuantity" placeholder="Product Quantity" value="<%= product.productquantity %>" name="productquantity">
                </div>
                <div class="form-group">
                  <label for="productDescription">Product Description</label>
                  <textarea class="form-control" id="productDescription" placeholder="Product Description" name="productdescription" ><%= product.productdescription %></textarea>
                </div>
                <div class="form-group">
                  <label for="brand">Brand</label>
                  <select class="form-control" id="brands" name="brands" >
                    <% brands.forEach(brand => { %>
                      <option value="<%= brand._id %>" <%= product.brand == brand._id ? 'selected' : '' %>><%= brand.name %></option>
                    <% }); %>
                  </select>
                </div>
                <div class="form-group">
                  <label for="Categories">Category</label>
                  <select class="form-control" id="Categories" name="Categories" >
                    <% category.forEach(category => { %>
                      <option value="<%= category._id %>" <%= product.category == category._id ? 'selected' : '' %>><%= category.name %></option>
                    <% }); %>
                  </select>
                </div>
                <input type="hidden" id="productId" value="<%= product._id %>">
                <div id="crop-container">
                  <img id="crop-image">
                  <button type="button" style="display: none;" id="crop-button">Crop</button>
                </div>
                <div class="form-group">
                  <label for="image1">Product Image 1</label>
                  <input type="file" class="form-control" id="image1" name="image1">
                  <img id="image-preview1" class="img-fluid mt-2"  style="height: 40px;">
                </div>
                <div class="form-group">
                  <label for="image2">Product Image 2</label>
                  <input type="file" class="form-control" id="image2" name="image2">
                  <img id="image-preview2" class="img-fluid mt-2"  style="height: 40px;" >
                </div>
                <div class="form-group">
                  <label for="image3">Product Image 3</label>
                  <input type="file" class="form-control" id="image3" name="image3">
                  <img id="image-preview3" class="img-fluid mt-2" style="height: 40px;">
                </div>
                <div class="form-group cropped-images" id="cropped-images"></div>
                <button type="submit" class="btn btn-primary mr-2">Edit</button>
                <button type="reset" class="btn btn-light">Cancel</button>
              </form>
              <div id="submitError" style="color: red;"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".forms-sample");
    const imageInputs = [
      document.getElementById("image1"),
      document.getElementById("image2"),
      document.getElementById("image3"),
    ];
    const cropContainer = document.getElementById("crop-container");
    const cropImage = document.getElementById("crop-image");
    const cropButton = document.getElementById("crop-button");
    let cropper;
    let currentInput;
    let currentPreview;
    let croppedImagesData = {};

    imageInputs.forEach((input) => {
      input.addEventListener("change", function (event) {
        document.getElementById("crop-button").style.display = "block";
        currentPreview = document.getElementById(
          `image-preview${imageInputs.indexOf(input) + 1}`
        );
        currentPreview.src = '';
        currentInput = input;
        const file = event.target.files[0];
        input.value = '';
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            cropImage.src = e.target.result;
            cropContainer.style.display = "block";
            if (cropper) {
              cropper.destroy();
            }
            cropper = new Cropper(cropImage, {
              aspectRatio: 0.72,
              viewMode: 1,
              movable: false,
              zoomable: false,
              rotatable: false,
              scalable: false,
            });
          };
          reader.readAsDataURL(file);
        }
      });
    });

    cropButton.addEventListener("click", () => {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas();
        const croppedImageDataURL = canvas.toDataURL();
        cropContainer.style.display = "none";

        currentPreview.src = croppedImageDataURL;
        currentPreview.style.maxWidth = "100%";

        const inputName = currentInput.getAttribute("name");
        croppedImagesData[inputName] = dataURLtoBlob(croppedImageDataURL);
      }
    });

    function dataURLtoBlob(dataurl) {
      let arr = dataurl.split(","),
        mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]),
        n = bstr.length,
        u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new Blob([u8arr], { type: mime });
    }

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const productName = document.getElementById('productName').value.trim();
      const productPrice = document.getElementById('productPrice').value.trim();
      const productQuantity = document.getElementById('productQuantity').value.trim();
      const productDescription = document.getElementById('productDescription').value.trim();
      const brands = document.getElementById('brands').value.trim();
      const categories = document.getElementById('Categories').value.trim();
      const productId = document.getElementById('productId').value;
      const submitError = document.getElementById('submitError');

      let errorMessage = '';

      if (!productName) {
        errorMessage += 'Product Name is required.<br>';
      }
      if (!productPrice || isNaN(productPrice) || productPrice <= 0) {
        errorMessage += 'Please enter a valid Product Price.<br>';
      }
      if (!productQuantity || isNaN(productQuantity) || productQuantity <= 0) {
        errorMessage += 'Please enter a valid Product Quantity.<br>';
      }
      if (!productDescription) {
        errorMessage += 'Product Description is required.<br>';
      }
      if (!brands) {
        errorMessage += 'Please select a Brand.<br>';
      }
      if (!categories) {
        errorMessage += 'Please select a Category.<br>';
      }

      if (errorMessage) {
        submitError.innerHTML = errorMessage;
        return;
      }

      const formData = new FormData();
      formData.append('productname', productName);
      formData.append('productprice', productPrice);
      formData.append('productquantity', productQuantity);
      formData.append('productdescription', productDescription);
      formData.append('brands', brands);
      formData.append('Categories', categories);
      formData.append('productId', productId);

      for (let key in croppedImagesData) {
        formData.append(key, croppedImagesData[key]);
      }

      try {
        const response = await fetch('/admin/Editproduct', {
          method: 'POST',
          body: formData,
        });
        const result = await response.json();

        if (result.success) {
          Swal.fire({
            title: 'Success',
            text: 'Product updated successfully!',
            icon: 'success',
          }).then(() => {
            window.location.href = '/admin/Products';
          });
        } else {
          Swal.fire({
            title: 'Error',
            text: result.message || 'An error occurred while updating the product.',
            icon: 'error',
          });
        }
      } catch (error) {
        console.error('Error updating product:', error);
        Swal.fire({
          title: 'Error',
          text: 'An error occurred while updating the product.',
          icon: 'error',
        });
      }
    });
  });
</script>
